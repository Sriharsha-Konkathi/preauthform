{"version":3,"sources":["Forms/PreAuthForm.js","App.js","serviceWorker.js","index.js"],"names":["FormikApp","withFormik","mapPropsToValues","_ref2","email","password","newsletter","plan","patientname","doctor","sex","age","contact","insuranceid","insurer","insuranceplan","treatment","hospital","address","zipcode","city","state","validationSchema","Yup","required","min","handleSubmit","values","_ref3","resetForm","setErrors","setSubmitting","setTimeout","console","log","_ref","errors","touched","isSubmitting","react_default","a","createElement","formik_esm","type","name","placeholder","component","value","phone","pattern","disabled","App","className","PreAuthForm","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa79804a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withFormik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n// import selectvalues from './selectoptions';\r\n\r\nconst App = ({ values, errors, touched, isSubmitting }) => (\r\n    \r\n    <div>\r\n        <center>\r\n        <h1>Insurance PreAuthorization Request Form</h1>\r\n    <Form>\r\n      <div>\r\n        {touched.email && errors.email && <p>{errors.email}</p>}\r\n        <label>Email:  \r\n        <Field type=\"email\" name=\"email\" placeholder=\"Email\" />       \r\n        </label>\r\n      </div>\r\n      <div>\r\n        {touched.password && errors.password && <p>{errors.password}</p>}\r\n        <label>Password\r\n        <Field type=\"password\" name=\"password\" placeholder=\"Password\" /></label>\r\n      </div>\r\n      {/* <label>\r\n        <Field type=\"checkbox\" name=\"newsletter\" checked={values.newsletter} />\r\n        Join our newsletter\r\n      </label> \r\n      <Field component=\"select\" name=\"plan\">\r\n        <option value=\"free\">Free</option>\r\n        <option value=\"premium\">Premium</option>\r\n      </Field>*/}\r\n      <div>\r\n            {touched.patientname && errors.patientname && <p>{errors.patientname}</p>}\r\n            <label>Patient Full Name:\r\n          <Field type=\"text\" name=\"patientname\" placeholder=\"Full Name\" /></label>\r\n      </div>\r\n      \r\n          <label> Doctor Name:\r\n      <Field component=\"select\" name=\"doctor\">\r\n        <option value=\"doctor1\">Doctor 1</option>\r\n        <option value=\"doctor2\">Doctor 2</option>\r\n        <option value=\"doctor3\">Doctor 3</option>\r\n      </Field></label>\r\n      <div>\r\n            {touched.age && errors.age && <p>{errors.age}</p>}\r\n            <label>Age :\r\n          <Field type=\"number\" name=\"age\" placeholder=\"Age\" /></label>\r\n      </div>\r\n      <label> Sex: \r\n      <Field component=\"select\" name=\"sex\">\r\n        <option value=\"male\">Male</option>\r\n        <option value=\"female\">Female</option>\r\n        <option value=\"others\">Others</option>\r\n      </Field></label>\r\n      <div>\r\n      {touched.phone && errors.phone && <p>{errors.phone}</p>}\r\n            <label>Contact Number :\r\n          <Field type=\"tel\" name=\"contact\" placeholder=\"Mobile Number\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" /></label>\r\n\r\n      </div>\r\n      <div>\r\n            {touched.insuranceid && errors.insuranceid && <p>{errors.insuranceid}</p>}\r\n            <label>Patient's Insurance ID:\r\n          <Field type=\"text\" name=\"insuranceid\" placeholder=\"Insurance ID Number\" /></label>\r\n      </div>\r\n      <label> Insurance Provider: \r\n      <Field component=\"select\" name=\"insurer\">\r\n        <option value=\"insurer1\">Insurer 1</option>\r\n        <option value=\"insurer2\">Insurer 2</option>\r\n        <option value=\"insurer3\">Insurer 3</option>\r\n      </Field></label>\r\n\r\n      {/* <label> Insurance Plan: \r\n      <Field component=\"select\" name=\"insuranceplan\">\r\n        <option value=\"insuranceplan1\">InsurancePlan 1</option>\r\n        <option value=\"insuranceplan2\">InsurancePlan 2</option>\r\n        <option value=\"insuranceplan3\">InsurancePlan 3</option>\r\n      </Field></label> */}\r\n\r\n      <label> Insurance Plan: \r\n      <Field component=\"select\" name=\"insuranceplan\">\r\n        \r\n      </Field></label>\r\n\r\n      <label> Treatment Requested: \r\n      <Field component=\"select\" name=\"treatment\">\r\n        <option value=\"treatment1\">Treatment 1</option>\r\n        <option value=\"treatment2\">Treatment 2</option>\r\n        <option value=\"treatment3\">Treatment 3</option>\r\n      </Field></label>\r\n\r\n      <label> Hospital Name: \r\n      <Field component=\"select\" name=\"hospital\" disabled>\r\n        <option value=\"hospital1\">Hospital 1</option>\r\n        <option value=\"hospital2\">Hospital 2</option>\r\n        <option value=\"hospital3\">Hospital 3</option>\r\n      </Field></label>\r\n\r\n      <div><label>Address: \r\n      <Field type=\"text\" name=\"address\" placeholder=\"Address\" disabled/></label>\r\n      </div>\r\n\r\n      <div><label>City: \r\n      <Field type=\"text\" name=\"city\" placeholder=\"City\" disabled/></label>\r\n      </div>\r\n      <div><label>State: \r\n      <Field type=\"text\" name=\"state\" placeholder=\"State\" disabled/></label>\r\n      </div>\r\n\r\n      <div><label>Zip Code: \r\n      <Field type=\"number\" name=\"zipcode\" placeholder=\"Zip Code\" disabled/></label>\r\n      </div>\r\n\r\n\r\n\r\n      <button type=\"submit\" disabled={isSubmitting}>\r\n        Submit\r\n      </button>\r\n      \r\n    </Form>\r\n    </center>\r\n    </div>\r\n  );\r\n  \r\n  const FormikApp = withFormik({\r\n    mapPropsToValues({ email, password, newsletter, plan, patientname,doctor,sex,age,contact,insuranceid,insurer,insuranceplan,treatment, hospital,address,zipcode,city,state }) {\r\n      return {\r\n        email: email || \"\",\r\n        password: password || \"\",\r\n        newsletter: newsletter || false,\r\n        plan: plan || \"free\",\r\n        patientname: patientname || \"\",\r\n        doctor: doctor || \"doctor1\",\r\n        sex: sex || \"male\",\r\n        age: age || 1,\r\n        contact: contact ,\r\n        insuranceid: insuranceid,\r\n        insurer: insurer || \"insurer1\",\r\n        insuranceplan: insuranceplan || \"insuranceplan3\",\r\n        treatment: treatment || \"treatment2\",\r\n        hospital: hospital,\r\n        address: address,\r\n        zipcode: zipcode,\r\n        city: city,\r\n        state: state\r\n\r\n        \r\n\r\n\r\n      };\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string()\r\n        .email()\r\n        .required(),\r\n      password: Yup.string()\r\n        .min(4)\r\n        .required(),\r\n      patientname: Yup.string()\r\n      .min(3)\r\n      .required(),\r\n      age: Yup.number().min(1).required(),\r\n      contact: Yup.number(),\r\n      insuranceid: Yup.string().min(6).required()\r\n      \r\n    }),\r\n    handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\r\n      setTimeout(() => {\r\n        if (values.email === \"s@gmail.com\") {\r\n          setErrors({ email: \"This email is already taken\" });\r\n        } else {\r\n          resetForm();\r\n        }\r\n        setSubmitting(false);\r\n      }, 2000);\r\n      console.log(values);\r\n    }\r\n  })(App);\r\n\r\n\r\nexport default FormikApp;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport FormikApp from './Forms/PreAuthForm';\n\nclass App extends Component {\n  render() {\n    return (\n      // <FormikApp email=\"raju@gmail.com\" patientname=\"Raju Bhai\"/>\n      <div className=\"container\">\n      <FormikApp hospital=\"hospital2\" address=\"Bellandur\" zipcode='506103' city=\"Bangalore\" state=\"Karnataka\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}